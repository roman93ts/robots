{"version":3,"sources":["serviceWorker.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/Header.js","containers/ErrorBoundry.js","containers/App.js","actions.js","constants.js","reducers.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","Card","_ref","id","name","email","react_default","a","createElement","className","alt","src","concat","CardList","robots","map","el","src_components_Card","key","SearchBox","searchField","type","placeholder","onChange","aria-label","Scroll","props","style","overflowY","children","Header","Component","ErrorBoundry","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","hasError","setState","App","onRequestRobots","_this$props","onSearchField","isPending","newRobots","filter","toLowerCase","includes","components_Header","src_components_SearchBox","components_Scroll","containers_ErrorBoundry","src_components_CardList","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","res","json","data","initialStateSearch","initialStateRequest","rootReducer","createLogger","combineReducers","arguments","length","undefined","action","objectSpread","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_containers_App","document","getElementById","URL","process","href","origin","addEventListener","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.9bfe7ae1.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport './Card.css';\n\nconst Card = ({id,name,email}) => {\n\treturn (\n\t\t<div className='card'>\n\t\t\t<img alt='robot' src={`https://robohash.org/${id}?size=200x200`}/>\n\t\t\t<div className='info'>\n\t\t\t\t<h2>{name}</h2>\n\t\t\t\t<p>{email}</p>\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\nimport './CardList.css';\n\nconst CardList = ({ robots }) => {\n\tconsole.log('CardList');\n\treturn (\n\t\t<div className = 'cardList'>\n\t\t\t{robots.map(el => {\n\t\t\t\treturn (\n\t\t\t\t\t<Card id={el.id} name={el.name} email={el.email} key={el.id}/>\n\t\t\t\t)\n\t\t\t})}\n\t\t</div>\n\t)\n}\n\nexport default CardList;","import React from 'react';\nimport './SearchBox.css';\n\nconst SearchBox = ({searchField}) => {\n\tconsole.log('SearchBox');\n\treturn (\n\t\t<div className = 'searchBox'>\n\t\t\t<input \ttype='search' \n\t\t\t\t\tplaceholder='type here' \n\t\t\t\t\tonChange={searchField}\n\t\t\t\t\taria-label='search robots'\n\t\t\t/>\n\t\t</div>\n\t)\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n\treturn (\n\t\t<div style={{'overflowY': 'scroll'}}>\n\t\t\t{props.children}\n\t\t</div>\n\t)\n}\n\nexport default Scroll;","import React, { Component } from 'react';\n\nclass Header extends Component {\n\tshouldComponentUpdate(){\n\t\treturn false;\n\t}\n\n\trender(){\n\t\tconsole.log('HEADER')\n\t\treturn <h1>Futurama</h1>\n\t}\n}\n\nexport default Header;","import React, {Component} from 'react';\n\nclass ErrorBoundry extends Component {\n\tconstructor(props){\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\thasError: false\n\t\t}\n\t}\n\n\tcomponentDidCatch(){\n\t\tthis.setState({hasError: true});\n\t}\n\n\trender() {\n\t\treturn (this.state.hasError)  \n\t\t\t? <h2>Ouch, fethcing failed</h2>\n\t\t\t: this.props.children\n\t}\n}\n\nexport default ErrorBoundry;","import React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport './App.css';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport Header from '../components/Header';\nimport ErrorBoundry from './ErrorBoundry';\n\nimport { setSearchField, requestRobots } from '../actions';\n\nconst mapStateToProps = state => {\n\treturn {\n\t\tsearchField: state.searchRobots.searchField,\n\t\trobots: state.requestRobots.robots,\n\t\tisPending: state.requestRobots.isPending,\n\t\terror: state.requestRobots.error\n\t}\n}\n\nconst mapDispatchToProps = dispatch => {\n\treturn {\n\t\tonSearchField: event=> dispatch(setSearchField(event.target.value)),\n\t\tonRequestRobots: () => dispatch(requestRobots())\n\t}\n}\n\nclass App extends Component {\n\t\n\n\tcomponentDidMount() {\n\t\tthis.props.onRequestRobots();\n\t}\n\n\trender(){\n\t\tconst {searchField, onSearchField, robots, isPending} = this.props;\n\t\tlet newRobots = robots.filter(el => {\n\t\t\treturn el.name.toLowerCase().includes(searchField.toLowerCase());\n\t\t})\n\t\treturn (\n\t\t\t\t<div className = 'app'>\n\t\t\t\t\t<Header />\n\t\t\t\t\t<SearchBox searchField = {onSearchField}/>\n\t\t\t\t\t<Scroll>\n\t\t\t\t\t{isPending ? <h1>Loading...</h1> :\n\t\t\t\t\t\t<ErrorBoundry>\n\t\t\t\t\t\t\t<CardList robots = {newRobots}/>\n\t\t\t\t\t\t</ErrorBoundry>\n\t\t\t\t\t}\n\t\t\t\t\t</Scroll>\n\t\t\t\t</div>\n\t\t\t)\n\t}\n}\n\nexport default connect(mapStateToProps,mapDispatchToProps)(App);","import {\n\tCHANGE_SEARCH_FIELD,\n\tREQUEST_ROBOTS_PENDING,\n\tREQUEST_ROBOTS_SUCCESS,\n\tREQUEST_ROBOTS_FAILED\n} from './constants.js';\n\nexport const setSearchField = (text) => {\n\treturn {\n\t\ttype: CHANGE_SEARCH_FIELD,\n\t\tpayload: text\n\t}\n}\n\nexport const requestRobots = () => (dispatch) => {\n\tdispatch({type: REQUEST_ROBOTS_PENDING});\n\tfetch('https://jsonplaceholder.typicode.com/users')\n\t.then(res => res.json())\n\t.then(data => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: data}))\n\t.catch(error => dispatch({type: REQUEST_ROBOTS_FAILED, payload: error}))\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import {\n\tCHANGE_SEARCH_FIELD,\n\tREQUEST_ROBOTS_PENDING,\n\tREQUEST_ROBOTS_SUCCESS,\n\tREQUEST_ROBOTS_FAILED\n} from './constants.js';\n\nconst initialStateSearch = {\n\tsearchField: ''\n}\n\nexport const searchRobots = (state=initialStateSearch,action={}) => {\n\tswitch (action.type) {\n\t\tcase CHANGE_SEARCH_FIELD:\n\t\t\treturn {...state, searchField: action.payload};\n\t\t\t// return Object.assign({},state,{searchField:action.payload})\n\t\tdefault:\n\t\t\treturn state\n\t}\n}\n\nconst initialStateRequest = {\n\trobots: [],\n\tisPending: false,\n\terror: ''\n}\n\nexport const requestRobots = (state=initialStateRequest,action={}) => {\n\tswitch (action.type){\n\t\tcase REQUEST_ROBOTS_PENDING:\n\t\t\treturn {...state, isPending: true}\n\t\tcase REQUEST_ROBOTS_SUCCESS:\n\t\t\treturn {...state, robots: action.payload, isPending: false}\n\t\tcase REQUEST_ROBOTS_FAILED:\n\t\t\treturn {...state, error: action.payload, isPending: false}\n\t\tdefault:\n\t\t\treturn state\n\t}\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport App from './containers/App';\nimport {Provider} from 'react-redux';\nimport {createStore, applyMiddleware, combineReducers} from 'redux';\nimport {createLogger} from 'redux-logger'; //nice way to log actions into the console \nimport thunkMiddleware from 'redux-thunk'; // looking what action will return a function instead of an object (fetch for example)\nimport {searchRobots, requestRobots} from './reducers';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({searchRobots,requestRobots});\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware)); //thhunkMiddleware,logger\n\nReactDOM.render(<Provider store={store}>\n\t\t\t\t\t<App />\n\t\t\t\t</Provider>\n\t\t\t\t, document.getElementById('root'));\n\n\nserviceWorker.register();\n"],"sourceRoot":""}