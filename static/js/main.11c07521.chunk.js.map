{"version":3,"sources":["components/Card.js","components/CardPlate.js","components/SearchField.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","_ref","id","name","email","react_default","a","createElement","className","src","concat","alt","CardPlate","array","map","user","src_components_Card","key","SearchField","changeSearchField","type","placeholder","onChange","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onField","event","newValue","target","value","toLowerCase","setState","searchField","state","robots","_this2","fetch","then","data","json","_this3","newRobots","filter","includes","length","src_components_SearchField","src_components_CardPlate","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yTAaeA,eAVF,SAAAC,GAAqB,IAAnBC,EAAmBD,EAAnBC,GAAGC,EAAgBF,EAAhBE,KAAKC,EAAWH,EAAXG,MACtB,OACCC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACdH,EAAAC,EAAAC,cAAA,OAAKE,IAAG,wBAAAC,OAA0BR,EAA1B,YAAwCS,IAAI,SACpDN,EAAAC,EAAAC,cAAA,SAAIJ,GACJE,EAAAC,EAAAC,cAAA,SAAIH,MCYQQ,SAhBG,SAAAX,GAAa,IAAXY,EAAWZ,EAAXY,MACnB,OACCR,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAEbK,EAAMC,IAAI,SAACC,GACX,OAAQV,EAAAC,EAAAC,cAACS,EAAD,CACNd,GAAIa,EAAKb,GACTC,KAAMY,EAAKZ,KACXC,MAAOW,EAAKX,MACZa,IAAKF,EAAKZ,YCEDe,SAZK,SAAAjB,GAAyB,IAAvBkB,EAAuBlB,EAAvBkB,kBACrB,OACCd,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACdH,EAAAC,EAAAC,cAAA,SACCa,KAAK,SACLC,YAAY,gBACZC,SAAUH,OCwCCI,cA3Cd,SAAAA,IAAa,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAODI,QAAU,SAACC,GACV,IAAMC,EAAWD,EAAME,OAAOC,MAAMC,cACpCZ,EAAKa,SAAS,CACbC,YAAaL,KATdT,EAAKe,MAAQ,CACZC,OAAQ,GACRF,YAAa,IAJFd,mFAeM,IAAAiB,EAAAd,KAClBe,MAAM,8CACLC,KAAK,SAAAC,GAAI,OAAIA,EAAKC,SAClBF,KAAK,SAAA5B,GACL0B,EAAKJ,SAAS,CACbG,OAAOzB,uCAKF,IAAA+B,EAAAnB,KACDoB,EAAYpB,KAAKY,MAAMC,OAAOQ,OAAO,SAAAjC,GAC1C,OAAOA,EAAKZ,KAAKiC,cAAca,SAASH,EAAKP,MAAMD,eAEpD,OAAKX,KAAKY,MAAMC,OAAOU,OAIrB7C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACdH,EAAAC,EAAAC,cAAA,4BACAF,EAAAC,EAAAC,cAAC4C,EAAD,CAAahC,kBAAmBQ,KAAKI,UACrC1B,EAAAC,EAAAC,cAAC6C,EAAD,CAAWvC,MAAOkC,KANb1C,EAAAC,EAAAC,cAAA,+BA/BQ8C,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvD,EAAAC,EAAAC,cAACsD,EAAD,MAAQC,SAASC,eAAe,SD2H1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvB,KAAK,SAAAwB,GACjCA,EAAaC","file":"static/js/main.11c07521.chunk.js","sourcesContent":["import React from 'react';\nimport './Card.css';\n\nconst Card = ({id,name,email}) => {\n\treturn (\n\t\t<div className='card'>\n\t\t\t<img src={`https://robohash.org/${id}?200x200`} alt='icon'/>\n\t\t\t<p>{name}</p>\n\t\t\t<p>{email}</p>\n\t\t</div>\n\t)\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\nimport './CardPlate.css';\n\nconst CardPlate = ({array}) => {\n\treturn (\n\t\t<div className='cardplate'>\n\t\t\t{\n\t\t\t\tarray.map((user) => {\n\t\t\t\treturn (<Card \n\t\t\t\t\t\tid={user.id} \n\t\t\t\t\t\tname={user.name} \n\t\t\t\t\t\temail={user.email} \n\t\t\t\t\t\tkey={user.name}/>)\n\t\t\t\t})\n\t\t\t}\n\t\t</div>\n\t)\n}\n\nexport default CardPlate;","import React from 'react';\nimport './SearchField.css';\n\nconst SearchField = ({changeSearchField}) => {\n\treturn (\n\t\t<div className='input'>\n\t\t\t<input \n\t\t\t\ttype='search' \n\t\t\t\tplaceholder='filter robots'\n\t\t\t\tonChange={changeSearchField}\n\t\t\t/>\n\t\t</div>\n\t);\n}\n\nexport default SearchField;","import React, {Component} from 'react';\nimport './App.css';\nimport CardPlate from '../components/CardPlate';\nimport SearchField from '../components/SearchField';\n\nclass App extends Component {\n\tconstructor(){\n\t\tsuper()\n\t\tthis.state = {\n\t\t\trobots: [],\n\t\t\tsearchField: ''\n\t\t}\n\t}\n\n\tonField = (event) => {\n\t\tconst newValue = event.target.value.toLowerCase();\n\t\tthis.setState({\n\t\t\tsearchField: newValue\n\t\t})\n\t}\n\n\tcomponentDidMount(){\n\t\tfetch(\"https://jsonplaceholder.typicode.com/users\")\n\t\t.then(data => data.json())\n\t\t.then(user => {\n\t\t\tthis.setState({\n\t\t\t\trobots:user\n\t\t\t})\n\t\t})\n\t}\n\n\trender(){\n\t\tconst newRobots = this.state.robots.filter(user => {\n\t\t\treturn user.name.toLowerCase().includes(this.state.searchField)\t\n\t\t})\n\t\tif (!this.state.robots.length){\n\t\t\treturn <h1>Loading...</h1>\n\t\t} else {\n\t\t\treturn (\n\t\t\t\t<div className=\"appLay\">\n\t\t\t\t\t<h1>Bender Friends</h1>\n\t\t\t\t\t<SearchField changeSearchField={this.onField}/>\n\t\t\t\t\t<CardPlate array={newRobots}/>\n\t\t\t\t</div>\n\t\t\t);\n\t\t}\n\t}\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}